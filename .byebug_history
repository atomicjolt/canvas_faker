c
exit
students_in_course[0]["id"]
c
url
c
exit
query_parameters
c
b 289
parameters
exit
url
method
type
params
url
c
full_url(api_url)
api_url
url
url = "https://atomicjolt.instructure.com/api/v1/courses/1009/assignments/9603?as_user_id=684"
url
api_url
c
url = "https://atomicjolt.instructure.com/api/v1/courses/1009/assignments/9603?as_user_id=684"
url
c
url = "https://atomicjolt.instructure.com/api/v1/courses/1323?event=delete?as_user_id=684"
url
c
@api.proxy("CONCLUDE_COURSE", {id: course_id, event: "delete"}, {as_user_id: 899})
c
@api.proxy("CONCLUDE_COURSE", {id: course_id, event: "delete", become_user_id: 899})
c
@api.proxy("CONCLUDE_COURSE", {id: course_id, event: "delete", as_user_id: 899})
students_in_course.count
exit
c
course_pages.count
exit
course_pages.count
course_pages
exit
@api.proxy("SHOW_FRONT_PAGE_COURSES", { course_id: 1501, as_user_id: user_id })
@api.proxy("SHOW_FRONT_PAGE_COURSES", { course_id: 1499, as_user_id: user_id })
user_id
a.count
a=@api.proxy("LIST_PAGES_COURSES", { course_id: 1501, as_user_id: user_id })
@api.proxy("LIST_PAGES_COURSES", { course_id: 1501, as_user_id: user_id })
course_pages.count
c
exit
@api.proxy("SHOW_FRONT_PAGE_COURSES", { course_id: 1501, as_user_id: 1 })
@api.proxy("SHOW_FRONT_PAGE_COURSES", { course_id: course_id, as_user_id: 1 })
@api.proxy("SHOW_FRONT_PAGE_COURSES", { course_id: course_id, as_user_id: user_id })
exit
@api.proxy("SHOW_FRONT_PAGE_COURSES", { course_id: course_id }, { })
@api.proxy("SHOW_FRONT_PAGE_COURSES", { course_id: course_id }, { as_user_id: 100 })
@api.proxy("SHOW_FRONT_PAGE_COURSES", { course_id: course_id }, { as_user_id: user_id })
exit
student
@api.proxy("SHOW_FRONT_PAGE_COURSES", { course_id: course_id }, { as_user_id: user_id })
c
@api.proxy("SHOW_FRONT_PAGE_COURSES", { course_id: course_id }, { as_user_id: user_id })
student
c
exit
c
number_of_pages
course_pages.count
c
exit
samp
exit
viewed_pages
c
students_in_course.count
students_in_course
c
exit
result
real.parsed_response
pp real.parsed_response
real.parsed_response
real["parsed_response"]
real.response
real
real.body.to_json
real.body.class
real.body
real.read
real.class
real.type
pp real
real
c
result["quiz_submissions"][0]
result["quiz_submissions"]
result
c
real
c
result
c
result
c
result
c
survey[0]
survey.count
c
survey.count
survey
c
students.count
students
studetns
exit
args
args[:a1]
c
students
exit
students
exit
c
email
c
num
index
c
num
index
c
num
index
exit
num_students
num_studetns
index
exit
custom
email
exit
custom
base_email
exit
custom
base_email
c
student["id"]
student
exit
students.first
students.first.id
students.first["id"]
students[0]["id"]
students
c
student
c
account_id
c
account_id
exit
account_id
email
full_name
c
exit
course_id
c
student["id"]
student[id]
student[:id]
student
c
student["id"]
student
c
exit
user_first_name
email
exit
email
c
full name
full_name = `#{user_first_name}#{user_last_name}`
full_name
c
user_first_name
c
a=@api.proxy('LIST_QUIZZES_IN_COURSE',{course_id: 966})
c
Faker::Pokemon.name
Faker::Pokemon.numbers
Faker::Pokemon.Numbers
Faker::Pokemon.constants
Faker::Pokemon
Faker.constants
Faker
exit
ARGV[1]
ARG[1]
exit
canvas_url
c
course["id"]
course.parsed_response["id"]
exit
course.parsed_response["id"]
course.parsed_response[:id]
course.parsed_response.id
course.parsed_response
course[:parsed_response]
course["parsed_response"]
course
exit
should_create_course?(existing_course_names, course_name)
index
c
LMS.constants
LMS
exit
courses[existing_course_names.find_index("#{course_name}")]
courses.parsed_response.find_index("Test Course")
courses.parsed_response.find_index("test Course")
courses.count
courses
courses[4]
courses[3]
courses[2]
courses[1]
courses[0]
courses.second
courses.first
courses
cou.class
cou= courses
courses.class
courses.find_index("Test Course")
courses.methods
courses.find_by(name: "Test Course")
courses.first
courses.count
course_name
courses.find_index("#{course_name}")
courses.find_index["#{course_name}"]
c
courses.count
c
exit
CanvasFaker::Functionality.get_account_id
CanvasFaker.constants::Functionality.get_account_id
CanvasFaker.constants::Functionality
